import {useRouter} from "next/router";
import React, {useEffect, useState} from "react";
import axios from "axios";
import Head from "next/head";
import {http} from "@/utils/http";
import ModalComponent from "@/components/ModalComponent";
import ButtonFechar from "@/components/ButtonFechar";

const UpdateCliente = () => {

    const [modalIsOpen, setModalIsOpen] = useState(false);

    const openModal = () => {
        setModalIsOpen(true);
    };

    const closeModal = () => {
        setModalIsOpen(false);
        router.push('/gestao-sgme/clientes')
    };



    const router = useRouter();


    const [errorApi, setErroApi] = useState(["OK"])
    const [resultErro, setResultErro] = useState(["OK"])
    const [status, setStatus] = useState([false])


    const [cliente, setCliente] = useState(
        {
            id: 0,
            cpf: "",
            nome: "",
            telefone: "",
            data_nascimento: ""
        }
    );

    const {codigo} = router.query;
    useEffect(() => {
        if (codigo) {
            http.get(`/clientes/${codigo}`)
                .then((response) => {
                    setCliente(response.data)
                })
                .then((response) => {
                    console.error('Erro atualizar busca na pagina!')
                })
        }

    }, [codigo])


    const handleUpdateCliente = async () => {
        try {
            await http.put(`/clientes/${codigo}`, cliente)
                .then((response) => {
                    setStatus(true)
                })
        } catch (error) {
            if (axios.isAxiosError(error) && error.response) {
                console.error('Erro na resposta da API:', error.response.data);
            } else {
                console.error('Erro ao enviar dados para a API:', error);
            }
        }
    }


    const handleInputChange = (e) => {
        setCliente({...cliente, [e.target.name]: e.target.value});
    };

    const handlerCancelar = () => {
        router.push("/gestao-sgme/clientes");
    }


    return (
        <>
            <Head>
                <title>SGME - Alterando Clientes</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>

            </Head>
            <div className="container d-flex align-items-center justify-content-center mt-5">

                <form className="form-control p-5">
                    <ButtonFechar url="/gestao-sgme/clientes"/>

                    <h3 className="mb-4">Atualizando Clientes</h3>
                    <div className="d-sm-flex flex-column  me-3">
                        <label htmlFor="valor">Nome Completo: </label>
                        <input placeholder="Nome"
                               className="form-control"
                               name="nome"
                               value={cliente.nome}
                               onChange={handleInputChange}
                        />
                    </div>

                    <div className="d-sm-flex flex-row justify-content-between mb-3">
                        <div className="d-sm-flex flex-column w-100 me-3">
                            <label htmlFor="valor">CPF: </label>
                            <input placeholder="Cpf"
                                   className="form-control"
                                   name="cpf"
                                   value={cliente.cpf}
                                   onChange={handleInputChange}
                            />

                        </div>

                        <div className="d-sm-flex flex-column w-100  me-3">
                            <label htmlFor="data_vencimento">Data Nascimento: </label>
                            <input type="date"
                                   className="form-control"
                                   name="data_nascimento"
                                   value={cliente.data_nascimento}
                                   onChange={handleInputChange}
                            />

                        </div>
                        <div className="d-sm-flex flex-column w-100 ">
                            <label htmlFor="data_vencimento">Telefone</label>
                            <input type="text"
                                   placeholder="Telefone/Celular"
                                   className="form-control"
                                   name="telefone"
                                   value={cliente.telefone}
                                   onChange={handleInputChange}
                            />

                        </div>

                    </div>

                    <button className="btn btn-success pe-3 ps-3 me-3" onClick={(e) => {
                        e.preventDefault();
                        handleUpdateCliente();
                        openModal()
                    }}>SALVAR
                    </button>
                    <button className="btn btn-danger pe-3 ps-3" onClick={(e) => {
                        e.preventDefault();
                        handlerCancelar();

                    }}>CANCELAR
                    </button>


                    <ModalComponent
                        isOpen={modalIsOpen}
                        onRequestClose={closeModal}
                    >
                        {status===true ? (
                            <div>
                                <p className="fw-bold text-success">Cliente alterado com sucesso</p>
                            </div>

                        ):(
                            <p>Erro ao atualizar</p>
                            )}


                    </ModalComponent>


                </form>


            </div>



        </>
    )
}

export default UpdateCliente;